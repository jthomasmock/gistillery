[{"path":"https://jthomasmock.github.io/gistillery/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 gistillery authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jthomasmock.github.io/gistillery/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Thomas Mock. Maintainer.","code":""},{"path":"https://jthomasmock.github.io/gistillery/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mock T (2022). gistillery: Upload Code Github Gists Take Code Screenshots via Carbon. https://github.com/jthomasmock/gistillery, https://jthomasmock.github.io/gistillery/.","code":"@Manual{,   title = {gistillery: Upload Code to Github Gists and Take Code Screenshots via Carbon},   author = {Thomas Mock},   year = {2022},   note = {https://github.com/jthomasmock/gistillery, https://jthomasmock.github.io/gistillery/}, }"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"gistillery-","dir":"","previous_headings":"","what":"Upload code to Github Gists and to Carbon","title":"Upload code to Github Gists and to Carbon","text":"goal gistillery make outrageously simple take local code, send Github gist, get beautiful image Carbon.now.sh, make ready share! packages operate space: gistr ROpenSci - use hood, provides powerful general interface Gists gistfo Miles McBain/Garrick Aden-Buie, usefully opinionated “Get Somewhere F*** Online” package. also use parts hood. carbonate Jonathan Sidi. robust approach similar problem. carbonate uses R6 classes RSelenium. Rather using RSelenium, gistillery uses webshot2 take screenshot code chromote.","code":""},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Upload code to Github Gists and to Carbon","text":"can install development version gistillery GitHub :","code":"# install.packages(\"remptes\") remotes::install_github(\"jthomasmock/gistillery\")"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"core-workflow","dir":"","previous_headings":"","what":"Core Workflow","title":"Upload code to Github Gists and to Carbon","text":"three core functions, providing three steps process. Take code upload Gist, take screenshot , add image url Gist. Importantly, steps required can take existing Gists use components functions rather stick end--end workflow. Please note Github Authentication required affect Gists, ’ll need reference gistr docs Generate personal access token gist scope selected, set GITHUB_PAT environment variable per session using Sys.setenv across sessions adding .Renviron file similar. See https://help.github.com/articles/creating--access-token--command-line-use help","code":""},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"step-1","dir":"","previous_headings":"Core Workflow","what":"Step 1","title":"Upload code to Github Gists and to Carbon","text":"can use gist_upload() take code file (via readLines), reprex/clipboard via clipr::read_clip(), unsaved file via rstudioapi. Note also attaches Gist URL bottom code snippet, eventually share code image people can still access copy-pastable code! (borrowed gistfo, original idea)","code":"# Load the functions library(gistillery) # this will use rstudioapi to take ALL the code from the currently # highlighted file inside RStudio # Workflow similar to core gistfo  gist_upload(content = NULL, gist_name = \"unsaved15.R\") # We can take an existing file, and throw it up as a Gist quickly gist_upload(content = readLines(\"mylocal-file.R\"), gist_name = \"local-file.R\")  # Or we can take some code from the clipboard gist_upload(content = clipr::read_clip(), gist_name = \"copy-pasted-code.R\") # or even a reprex gist_upload(reprex::reprex(), gist_name = \"test-prex.R\")  # or save the reprex to an object first test_reprex <- reprex::reprex() gist_upload(test_reprex, gist_name = \"reprex-object.R\")"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"step-2","dir":"","previous_headings":"Core Workflow","what":"Step 2","title":"Upload code to Github Gists and to Carbon","text":"Regardless got code Gist, can move step 2 get code carbon.now.sh beautiful screenshots. takes unique id Gist returns lovely screenshot. Note want share screenshot also appends gist URL bottom image. also include alt-text linking Gist! screenshot code, full code available : https://gist.github.com/jthomasmock/17adcd1a401bec0e41cbd671048ff0b4 want go customization, can change background color bg, code theme theme, monospace font font, programming language lang optionally turn /“upload Imgur” feature. imgur=TRUE option give immediate URL can embed code elsewhere without actually upload full image . can also set parameters via options like : options(gistillery.bg = \"#d3d3d3\", gistillery.theme = \"cobalt\", gistillery.font = \"Fira+Code\")","code":"# core workflow gist_to_carbon(   gist_id = \"17adcd1a401bec0e41cbd671048ff0b4\",    file = \"my-screenshot.png\"   )"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"step-3","dir":"","previous_headings":"Core Workflow","what":"Step 3","title":"Upload code to Github Gists and to Carbon","text":"Now local image Imgur link, can use third function. add_gist_img take existing gist append Imgur link code , way can programmatically add screenshot URL back specific Gists. Alternatively, can use Imgur link include code places ’s inconvenient use local image files can’t format code properly. can also use gist_comment() upload markdown-styled image comments existing Gist, like : add comment existing gist, adding markdown image.","code":"gist_append_img(   imgur_url = \"https://i.imgur.com/UEkGyx7.png\",    gist_id = \"17adcd1a401bec0e41cbd671048ff0b4\"   ) gist_comment(gist_id, \"![](some-valid-imgur-url.png)\")"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"step-n--1","dir":"","previous_headings":"Core Workflow","what":"Step N + 1","title":"Upload code to Github Gists and to Carbon","text":"Now next step, may want post Twitter somewhere else. ask use alt-text link Github can assist screen-reader users folks just want copy-paste code! 2022-05-09, can use GitHub version rtweet::post_tweet() post tweets, images, alt-text. IE:","code":"rtweet::post_tweet(   status = \"My cool code screenshot\",   media = \"my-screenshot.png\",   media_alt_text = \"This is a screenshot of some R code. The code is available at https://gist.github.com/jthomasmock/17adcd1a401bec0e41cbd671048ff0b4. I have also copy-pasted the code below:      # core workflow   gist_to_carbon(     gist_id = '17adcd1a401bec0e41cbd671048ff0b4',      file = 'my-screenshot.png'   )   \" )"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"reprex_shot","dir":"","previous_headings":"Core Workflow","what":"reprex_shot()","title":"Upload code to Github Gists and to Carbon","text":"last function, reprex_shot() local workflow. Calling function execute reprex::reprex() save HTML image disk. fine want quickly get local screenshot gist url attached screenshot.","code":"reprex_shot(filename = \"my-local-reprex.png\")"},{"path":"https://jthomasmock.github.io/gistillery/index.html","id":"altogether","dir":"","previous_headings":"Core Workflow","what":"Altogether","title":"Upload code to Github Gists and to Carbon","text":"wanted, used pipe based workflow get seamless reprex -> upload Gist -> screenshot Carbon.","code":"reprex::reprex() |>    gistillery::gist_upload(gist_name = \"new-test-reprex.R\") |>    gistillery::gist_to_carbon(file = \"new-test-reprex.png\")"},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_append_img.html","id":null,"dir":"Reference","previous_headings":"","what":"Add imgur-hosted URL to existing gist as a ","title":"Add imgur-hosted URL to existing gist as a ","text":"Add imgur-hosted URL existing gist \"comment\" bottom script.","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_append_img.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add imgur-hosted URL to existing gist as a ","text":"","code":"gist_append_img(imgur_url, gist_id = NULL)"},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_append_img.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add imgur-hosted URL to existing gist as a ","text":"imgur_url Existing URL imgur, typically created gistillery::gist_to_carbon() gist_id Unique ID existing Github Gist - comment added.","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_append_img.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add imgur-hosted URL to existing gist as a ","text":"Adds commented line bottom existing Gist code","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_comment.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a comment to an existing gist — gist_comment","title":"Add a comment to an existing gist — gist_comment","text":"Add comment existing gist","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_comment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a comment to an existing gist — gist_comment","text":"","code":"gist_comment(   gist_id,   body = \"![](pbs.twimg.com/media/FBGfjADUYAUxiPz?format=png)\",   ... )"},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_comment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a comment to an existing gist — gist_comment","text":"gist_id Character string indicating gist ID body comment text ... Additional arguments passed `gistr:::gist_post()`","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_comment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a comment to an existing gist — gist_comment","text":"string comment text","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_to_carbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Take an existing gist, send to carbon, and save the image locally — gist_to_carbon","title":"Take an existing gist, send to carbon, and save the image locally — gist_to_carbon","text":"Take existing gist, send carbon, save image locally","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_to_carbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take an existing gist, send to carbon, and save the image locally — gist_to_carbon","text":"","code":"gist_to_carbon(   gist_id,   file = \"code.png\",   bg = getOption(\"gistillery.bg\", default = \"#4A90E2\"),   theme = getOption(\"gistillery.theme\", default = \"night-owl\"),   font = getOption(\"gistillery.font\", default = \"Hack\"),   lang = \"auto\",   imgur = TRUE,   drop_shadow = TRUE,   width = 680,   width_auto_adjust = TRUE )"},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_to_carbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take an existing gist, send to carbon, and save the image locally — gist_to_carbon","text":"gist_id unique id existing gist, can piped gist_upload() passed manually. file name file printing, eg code.png bg valid hex code color, ie #D3D3D3 theme valid theme, ie one \"cobalt\", \"nord\", \"seti\", \"night-owl\", \"monokai\", \"material\", \"vscode\", \"verminal\", \"synthwave-84\", \"shades--purple\" font character string font, one \"IBM+Plex+Mono\", \"Hack\", \"Fira+Code\", \"Source+Code+Pro\" lang language syntax highlighting, ie one \"python\", \"r\", \"yaml\", \"markdown\", \"text\", \"auto\" imgur logical, image also uploaded imgur. drop_shadow Logical indicating whether include drop shadow screenshot. width number, indicating width pixels screenshot width_auto_adjust Logical indicating whether auto adjust width better code-printing","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_to_carbon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take an existing gist, send to carbon, and save the image locally — gist_to_carbon","text":"Saves image disk optionally returns uploaded imgur URL","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_upload.html","id":null,"dir":"Reference","previous_headings":"","what":"Take local code and upload to a named gist — gist_upload","title":"Take local code and upload to a named gist — gist_upload","text":"Create gist","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_upload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take local code and upload to a named gist — gist_upload","text":"","code":"gist_upload(content = NULL, gist_name = NULL, ...)"},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_upload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take local code and upload to a named gist — gist_upload","text":"content code, either currently highlighted file manually indicated code gist_name valid filename ie -code.R ... args passed verb-POST","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_upload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take local code and upload to a named gist — gist_upload","text":"gist id gist URL clipboard, can piped directly gist_to_carbon","code":""},{"path":[]},{"path":"https://jthomasmock.github.io/gistillery/reference/gist_upload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take local code and upload to a named gist — gist_upload","text":"","code":"if (FALSE) { file <- tempfile() cat(\"hello world\", file = file) gist_create(files=file, description='a new cool gist')  file1 <- tempfile() file2 <- tempfile() cat(\"foo bar\", file = file1) cat(\"foo bar\", file = file2) gist_create(files=c(file1, file2), description='spocc demo files')  # include any code by passing to the code parameter gist_create(code={' x <- letters numbers <- runif(10) numbers '})  # Knit an .Rmd file before posting as a gist file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") gist_create(file, description='a new cool gist', knit=TRUE)  file <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") gist_create(file, description='some plots', knit=TRUE)  # an .Rnw file file <- system.file(\"examples\", \"rnw_example.Rnw\", package = \"gistr\") gist_create(file) gist_create(file, knit=TRUE)  # Knit code input before posting as a gist gist_create(code={' ```{r} x <- letters (numbers <- runif(8)) ``` '}, knit=TRUE)  url <- \"https://raw.githubusercontent.com/ropensci/geojsonio/master/inst/examples/zillow_or.geojson\" json <- crul::HttpClient$new(url)$get()$parse(\"UTF-8\") gist_create(code = json, filename = \"zillow_or.geojson\")  # Knit and include source file, so both files are in the gist file <- system.file(\"examples\", \"stuff.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE, include_source=TRUE)  gist_create(code={' ```{r} x <- letters (numbers <- runif(8)) ``` '}, filename=\"code.Rmd\", knit=TRUE, include_source=TRUE)  # Uploading images created during knit process ## using imgur - if you're file uses imgur or similar, you're good file <- system.file(\"examples\", \"plots_imgur.Rmd\", package = \"gistr\") cat(readLines(file), sep = \"\\n\") # peek at file gist_create(file, knit=TRUE) ## if not, GitHub doesn't allow upload of binary files via the HTTP API  ## (which gistr uses) - so see gist_create_git(), which uses git file <- system.file(\"examples\", \"plots.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE, imgur_inject = TRUE) ## works with ggplot2 as well file <- system.file(\"examples\", \"ggplot_imgur.Rmd\", package = \"gistr\") gist_create(file, knit=TRUE)  # Render `.R` files file <- system.file(\"examples\", \"example1.R\", package = \"gistr\") cat(readLines(file), sep = \"\\n\") # peek at file gist_create(file, knit = TRUE) gist_create(file, knit = TRUE, include_source = TRUE) ## many files (file1 <- system.file(\"examples\", \"example1.R\", package = \"gistr\")) (file2 <- system.file(\"examples\", \"example2.R\", package = \"gistr\")) cat(readLines(file1), sep = \"\\n\") # peek at file cat(readLines(file2), sep = \"\\n\") # peek at file gist_create(files=list(file1, file2), knit = TRUE) ### three at once, some .R and some .Rmd file3 <- system.file(\"examples\", \"plots_imgur.Rmd\", package = \"gistr\") gist_create(files=list(file1, file2, file3), knit = TRUE) gist_create(files=list(file1, file2, file3), knit = TRUE,    include_source = TRUE)  # Use rmarkdown::render instead of knitr::knit file <- system.file(\"examples\", \"rmarkdown_eg.Rmd\", package = \"gistr\") gist_create(file, knit = TRUE, rmarkdown = TRUE, imgur_inject = TRUE,    renderopts = list(output_format = \"md_document\")) }"},{"path":"https://jthomasmock.github.io/gistillery/reference/reprex_shot.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a reprex::reprex() and take a local screenshot of the reprex output — reprex_shot","title":"Execute a reprex::reprex() and take a local screenshot of the reprex output — reprex_shot","text":"`reprex_shot()` first take `reprex` capture HTML output -disk image, optionally uploading image Imgur.","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/reprex_shot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a reprex::reprex() and take a local screenshot of the reprex output — reprex_shot","text":"","code":"reprex_shot(filename = NULL, open_file = TRUE, imgur = FALSE, ...)"},{"path":"https://jthomasmock.github.io/gistillery/reference/reprex_shot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a reprex::reprex() and take a local screenshot of the reprex output — reprex_shot","text":"filename filename, ending .png open_file logical, file opened saved imgur logical, image uploaded imgur also ... Arguments passed reprex::reprex x expression. given, reprex() looks code input. input provided, reprex() looks clipboard. clipboard structurally unavailable, e.g., RStudio Server RStudio Cloud, reprex() consults current selection instead clipboard. input Character. length one lacks terminating newline, interpreted path file containing reprex code. Otherwise, assumed hold reprex code character vector. input specifies filepath, also determines reprex working directory location resulting files. wd optional filepath consulted input filepath. (default, work done, quietly, subdirectory session temp directory.) common use wd set wd = \".\", means \"reprex right current working directory\". really must demonstrate something local files. venue Character. Must one following (case insensitive): \"gh\" GitHub-Flavored Markdown, default \"r\" runnable R script, commented output interleaved. Also useful Slack code snippets; select \"R\" \"Type\" drop-menu enjoy nice syntax highlighting. \"rtf\" Rich Text Format (supported un-reprexing) \"html\" HTML fragment suitable inclusion larger HTML document (supported un-reprexing) \"slack\" pasting Slack message. Works best opt Slack's WYSIWYG interface , instead, go Preferences > Advanced select \"Format messages markup\". \"\" Stack Overflow Markdown. Note: just alias \"gh\", since Stack Overflow started support CommonMark-style fenced code blocks January 2019. \"ds\" Discourse, e.g., community.rstudio.com. Note: currently just alias \"gh\". render Logical. Whether call rmarkdown::render() templated reprex, .e. whether actually run code. Defaults TRUE. Exists primarily sake internal testing. advertise Logical. Whether include footer describes reprex created. unspecified, option reprex.advertise consulted , defined, default TRUE venues \"gh\", \"html\", \"\", \"ds\" FALSE \"r\", \"rtf\", \"slack\". session_info Logical. Whether include sessioninfo::session_info(), available, sessionInfo() end reprex. venue \"gh\", session info wrapped collapsible details tag. Read opt(). style Logical. Whether set knitr chunk option tidy = \"styler\", re-styles code styler package. Read opt(). comment Character. Prefix comment output, defaults \"#>\". Read opt(). tidyverse_quiet Logical. Sets options tidyverse.quiet tidymodels.quiet, suppress (TRUE, default) include (FALSE) startup messages tidyverse tidymodels packages. Read opt(). std_out_err Logical. Whether append section output sent stdout stderr reprex rendering process. can necessary reveal output reprex spawns child processes system() calls. Note properly interleaved output main R process, guarantee lines standard output standard error correct chronological order. See callr::r() . Read opt(). html_preview Logical. Whether show rendered output viewer (RStudio browser). Always FALSE noninteractive session. Read opt(). outfile wd providing filepath input. reprex current working directory, use wd = \".\" now, instead outfile = NA. show html_preview, greater consistency R Markdown output formats. si session_info.","code":""},{"path":"https://jthomasmock.github.io/gistillery/reference/reprex_shot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a reprex::reprex() and take a local screenshot of the reprex output — reprex_shot","text":"screenshot reprex disk","code":""}]
